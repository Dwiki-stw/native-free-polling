basePath: /
definitions:
  dto.ChangePasswordRequest:
    properties:
      password:
        type: string
    type: object
  dto.CreatePollingRequest:
    properties:
      description:
        type: string
      ends_at:
        type: string
      options:
        items:
          type: string
        type: array
      starts_at:
        type: string
      status:
        type: string
      title:
        type: string
    required:
    - description
    - ends_at
    - options
    - starts_at
    - status
    - title
    type: object
  dto.CreatorInfo:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      token:
        type: string
    type: object
  dto.Option:
    properties:
      id:
        type: integer
      label:
        type: string
      position:
        type: integer
    type: object
  dto.PollingResponse:
    properties:
      created_at:
        type: string
      creator:
        $ref: '#/definitions/dto.CreatorInfo'
      description:
        type: string
      ends_at:
        type: string
      id:
        type: integer
      polling_options:
        items:
          $ref: '#/definitions/dto.Option'
        type: array
      starts_at:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  dto.PollingSummaryForCreator:
    properties:
      id:
        type: integer
      status:
        type: string
      title:
        type: string
      total_votes:
        type: integer
    type: object
  dto.PollingSummaryForVoter:
    properties:
      id:
        type: integer
      status:
        type: string
      title:
        type: string
      user_voted:
        type: string
    type: object
  dto.ProfileResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.RegisterResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.ResultPolling:
    properties:
      poll_id:
        type: integer
      result:
        items:
          $ref: '#/definitions/dto.Vote'
        type: array
      total_votes:
        type: integer
    type: object
  dto.UpdatePollingRequest:
    properties:
      description:
        type: string
      ends_at:
        type: string
      id:
        type: integer
      options:
        items:
          $ref: '#/definitions/dto.Option'
        type: array
      starts_at:
        type: string
      status:
        type: string
      title:
        type: string
    required:
    - description
    - ends_at
    - id
    - options
    - starts_at
    - status
    - title
    type: object
  dto.UpdateProfileRequest:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  dto.Vote:
    properties:
      option_id:
        type: integer
      optoin_label:
        type: string
      votes:
        type: integer
    type: object
  dto.VoteRequest:
    properties:
      device_hash:
        type: string
      option_id:
        type: integer
    type: object
host: localhost:3000
info:
  contact: {}
  description: RESTful API for managing polls, votes, and user profiles
  title: Free Polling API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns a JWT token for secure access.
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.LoginResponse'
      summary: Login user
      tags:
      - Auth
  /pollings:
    post:
      consumes:
      - application/json
      description: Creates a new poll with title, options, and start/end timestamps
      parameters:
      - description: Poll create payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePollingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PollingResponse'
      security:
      - BearerAuth: []
      summary: create polling
      tags:
      - Polling
  /pollings/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a poll. Only the creator is authorized to remove it.
      parameters:
      - description: Poll ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: delete polling
      tags:
      - Polling
    get:
      consumes:
      - application/json
      description: Fetches detailed information about a specific poll.
      parameters:
      - description: Poll ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PollingResponse'
      summary: get polling
      tags:
      - Polling
    patch:
      consumes:
      - application/json
      description: Updates an existing poll. Only the creator can modify title, options,
        or timestamps.
      parameters:
      - description: Poll ID
        in: path
        name: id
        required: true
        type: integer
      - description: Poll update payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePollingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PollingResponse'
      security:
      - BearerAuth: []
      summary: update polling
      tags:
      - Polling
  /pollings/{id}/results:
    get:
      consumes:
      - application/json
      description: Returns the voting results for a specific poll.
      parameters:
      - description: Poll ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResultPolling'
      summary: get polling result
      tags:
      - Polling
  /pollings/{id}/votes:
    post:
      consumes:
      - application/json
      description: Submits a vote for specific poll option.
      parameters:
      - description: Poll ID
        in: path
        name: id
        required: true
        type: integer
      - description: Poll vote payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
      summary: vote option
      tags:
      - Polling
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user with email, name, and password.
      parameters:
      - description: Register credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
      summary: Register user
      tags:
      - Auth
  /users/me:
    get:
      consumes:
      - application/json
      description: Retrieves profile information of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProfileResponse'
      security:
      - BearerAuth: []
      summary: get profile info user login
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Updates the profile information of the currently authenticated
        user.
      parameters:
      - description: profile update payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProfileResponse'
      security:
      - BearerAuth: []
      summary: update profile info user login
      tags:
      - User
  /users/me/change-password:
    patch:
      consumes:
      - application/json
      description: Updates the profile information of the currently authenticated
        user.
      parameters:
      - description: change password payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: update profile info user login
      tags:
      - User
  /users/me/pollings/created:
    get:
      consumes:
      - application/json
      description: Retrieves a list polls created by the logged-in user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.PollingSummaryForCreator'
            type: array
      security:
      - BearerAuth: []
      summary: get list polls creater by user login
      tags:
      - User
  /users/me/pollings/voted:
    get:
      consumes:
      - application/json
      description: Retrieves a list polls voted on by the logged-in user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PollingSummaryForVoter'
      security:
      - BearerAuth: []
      summary: get list polls voter by user login
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
